//SJF Preemptive
package os;

import java.util.Scanner;

public class SJFPreemptive {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter number of processes:");
        int n = sc.nextInt();
        int[] pid = new int[n];   // Process IDs
        int[] at = new int[n];    // Arrival times
        int[] bt = new int[n];    // Burst times
        int[] rt = new int[n];    // Remaining times
        int[] ct = new int[n];    // Completion times
        int[] ta = new int[n];    // Turnaround times
        int[] wt = new int[n];    // Waiting times
        int[] f = new int[n];     // Flag to indicate if a process is finished
        int st = 0, tot = 0;
        float avgwt = 0, avgta = 0;

        for (int i = 0; i < n; i++) {
            System.out.println("Enter process " + (i + 1) + " arrival time:");
            at[i] = sc.nextInt();
            System.out.println("Enter process " + (i + 1) + " burst time:");
            bt[i] = sc.nextInt();
            pid[i] = i + 1;
            rt[i] = bt[i];   // Initially, remaining time is equal to burst time
            f[i] = 0;
        }

        while (true) {
            int c = n, min = 999;
            if (tot == n) 
                break;

            for (int i = 0; i < n; i++) {
                if ((at[i] <= st) && (f[i] == 0) && (rt[i] < min)) {
                    min = rt[i];
                    c = i;
                }
            }

            if (c == n)
                st++;
            else {
                rt[c]--;
                st++;

                if (rt[c] == 0) {
                    ct[c] = st;
                    ta[c] = ct[c] - at[c];
                    wt[c] = ta[c] - bt[c];
                    f[c] = 1;
                    tot++;
                }
            }
        }

        System.out.println("\npid  arrival  burst  complete  turn  waiting");
        for (int i = 0; i < n; i++) {
            avgwt += wt[i];
            avgta += ta[i];
            System.out.println(pid[i] + "\t" + at[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" + ta[i] + "\t" + wt[i]);
        }
        System.out.println("\nAverage Turnaround Time is " + (avgta / n));
        System.out.println("Average Waiting Time is " + (avgwt / n));
        sc.close();
    }
}

