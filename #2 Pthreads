//2. Write a Program to implement multithreading for Matrix Operations using Pthreads.
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define MAX 10 // Maximum size of the matrix

// Matrices and their sizes
int matA[MAX][MAX], matB[MAX][MAX], matC[MAX][MAX];
int rowA, colA, rowB, colB;

// Thread function to calculate one row of the result matrix
void* multiply_row(void* arg) {
    int row = *(int*)arg;
    free(arg); // Free the dynamically allocated memory

    for (int j = 0; j < colB; j++) {
        matC[row][j] = 0; // Initialize result element
        for (int k = 0; k < colA; k++) {
            matC[row][j] += matA[row][k] * matB[k][j];
        }
    }

    pthread_exit(0);
}

int main() {
    // Input matrix dimensions
    printf("Enter rows and columns for Matrix A: ");
    scanf("%d %d", &rowA, &colA);
    printf("Enter rows and columns for Matrix B: ");
    scanf("%d %d", &rowB, &colB);

    if (colA != rowB) {
        printf("Matrix multiplication not possible. Column of A must equal row of B.\n");
        return -1;
    }

    // Input Matrix A
    printf("Enter elements of Matrix A:\n");
    for (int i = 0; i < rowA; i++) {
        for (int j = 0; j < colA; j++) {
            scanf("%d", &matA[i][j]);
        }
    }

    // Input Matrix B
    printf("Enter elements of Matrix B:\n");
    for (int i = 0; i < rowB; i++) {
        for (int j = 0; j < colB; j++) {
            scanf("%d", &matB[i][j]);
        }
    }

    // Create threads for each row of result matrix
    pthread_t threads[rowA];
    for (int i = 0; i < rowA; i++) {
        int* row = malloc(sizeof(int)); // Allocate memory for row index
        *row = i;
        pthread_create(&threads[i], NULL, multiply_row, row);
    }

    // Wait for all threads to complete
    for (int i = 0; i < rowA; i++) {
        pthread_join(threads[i], NULL);
    }

    // Print the result matrix
    printf("Resultant Matrix C:\n");
    for (int i = 0; i < rowA; i++) {
        for (int j = 0; j < colB; j++) {
            printf("%d ", matC[i][j]);
        }
        printf("\n");
    }

    return 0;
}
